<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\node\NodeInterface;
use Drupal\Core\Url;
use Drupal\Core\Link;

/**
 * Compute effective capacity for an appointment node.
 *
 * Capacity is the minimum of the capacities defined on the appointment's
 * "badges" (taxonomy terms) and the facilitator's own capacity limit from
 * their profile.
 *
 * @param \Drupal\node\NodeInterface $node
 *   The appointment node.
 *
 * @return int
 *   The effective capacity, defaulting to 1.
 */
function appointment_facilitator_effective_capacity(NodeInterface $node): int {
  $caps = [];

  // Badge capacities.
  if ($node->hasField('field_appointment_badges') && !$node->get('field_appointment_badges')->isEmpty()) {
    foreach ($node->get('field_appointment_badges')->referencedEntities() as $term) {
      if (is_object($term) && $term->hasField('field_badge_capacity') && !$term->get('field_badge_capacity')->isEmpty()) {
        $caps[] = (int) $term->get('field_badge_capacity')->value;
      }
    }
  }

  // Facilitator capacity from Profile (configurable bundle).
  if ($node->hasField('field_appointment_host') && !$node->get('field_appointment_host')->isEmpty()) {
    $user = $node->get('field_appointment_host')->entity;
    $bundle = \Drupal::config('appointment_facilitator.settings')->get('facilitator_profile_bundle') ?: 'coordinator';
    if ($user && \Drupal::moduleHandler()->moduleExists('profile') && $bundle) {
      $profiles = \Drupal::entityTypeManager()->getStorage('profile')->loadByUser($user, $bundle);
      if ($profiles) {
        $profile = NULL;
        foreach ($profiles as $p) {
          $profile = $p;
          break;
        }
        if (is_object($profile) && $profile->hasField('field_coordinator_capacity') && !$profile->get('field_coordinator_capacity')->isEmpty()) {
          $caps[] = (int) $profile->get('field_coordinator_capacity')->value;
        }
      }
    }
  }

  $caps = array_filter(array_map('intval', $caps), fn($v) => $v > 0);
  return $caps ? min($caps) : 1;
}

/**
 * Implements hook_entity_view().
 *
 * Adds the capacity information and a "Join" CTA to appointment nodes.
 */
function appointment_facilitator_entity_view(array &$build, EntityInterface $entity, $view_mode, $langcode) {
  if ($entity->getEntityTypeId() !== 'node' || $entity->bundle() !== 'appointment' || $view_mode !== 'full') {
    return;
  }

  $account = \Drupal::currentUser();
  $effective_capacity = appointment_facilitator_effective_capacity($entity);

  // Add a capacity summary.
  $build['appointment_capacity_summary'] = [
    '#type' => 'container',
    '#attributes' => ['class' => ['appointment-capacity-summary']],
    'summary' => ['#markup' => '<div><strong>' . t('Capacity') . ':</strong> ' . $effective_capacity . '</div>'],
    '#weight' => -60,
  ];

  // Gate the Join CTA.
  if ($account->isAnonymous()) {
    return;
  }
  if (!$entity->hasField('field_appointment_attendees')) {
    return;
  }

  $conf = \Drupal::config('appointment_facilitator.settings');
  $show_always = (bool) $conf->get('show_always_join_cta');

  if (!$show_always && $effective_capacity <= 1) {
    return;
  }

  $attendees = $entity->get('field_appointment_attendees')->referencedEntities();
  $remaining = max(0, $effective_capacity - count($attendees));
  if ($remaining <= 0) {
    return;
  }

  // Add the Join CTA.
  $url = Url::fromRoute('appointment_facilitator.join', ['node' => $entity->id()]);
  $link = Link::fromTextAndUrl(t('Join this appointment'), $url)->toString();
  $build['appointment_join'] = [
    '#type' => 'container',
    '#attributes' => ['class' => ['appointment-join-cta']],
    'remaining' => ['#markup' => '<div><strong>' . t('Seats left') . ':</strong> ' . (int) $remaining . '</div>'],
    'cta' => ['#markup' => '<div class="join-btn">' . $link . '</div>'],
    '#weight' => -50,
  ];
}

/**
 * Implements hook_entity_form_display_alter().
 *
 * Provides default settings for Smart Date widgets to prevent fatal errors
 * when the field is not configured as expected.
 *
 * @see https://www.drupal.org/project/smart_date/issues/3422612
 */
function appointment_facilitator_entity_form_display_alter(&$form_display, $context) {
  if ($context['entity_type'] == 'node' && $context['bundle'] == 'appointment') {
    if ($component = $form_display->getComponent('field_appointment_date')) {
      // The specific widget can vary, but they all use the same settings.
      $smart_date_widgets = [
        'smartdate_inline',
        'smartdate_default',
        'smartdate_timestamp',
      ];
      if (in_array($component['type'], $smart_date_widgets)) {
        if (empty($component['settings']['default_duration_increments'])) {
          $component['settings']['default_duration_increments'] = '1, 5, 10, 15, 30, 45, 60';
        }
        if (empty($component['settings']['default_duration'])) {
          $component['settings']['default_duration'] = 60;
        }
        $form_display->setComponent('field_appointment_date', $component);
      }
    }
  }
}
